## Task 1. Create a project jumphost instance

    gcloud compute instances create nucleus-jumphost-125 \
    --machine-type f1-micro --zone us-west1-d
    
   # Use SSH to connect instance
        gcloud compute ssh nucleus-jumphost-125 --zone us-west1-d
        # exit pra sair

## Task 2. Create a Kubernetes service cluster

  # Create a zonal cluster using <filled in at lab start>.

    gcloud config set compute/region us-west1
    gcloud config set compute/zone us-west1-d

  # Use the Docker container hello-app (gcr.io/google-samples/hello-app:2.0) 
    as a placeholder; the team will replace the container with their own work later.
    Expose the app on port App port number.

    gcloud container clusters create nucleus-webserver1 \
    --machine-type=n1-standard-1 --zone=us-west1-d

    gcloud container clusters get-credentials nucleus-webserver1

    kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:2.0

    kubectl expose deployment hello-server --type=LoadBalancer --port 8081

    kubectl get service 
    
    # get the external IP and test it on http://[EXTERNAL-IP]:8081

## Task 3. Set up an HTTP load balancer

  #Configure nginx web servers
    cat << EOF > startup.sh
    #! /bin/bash
    apt-get update
    apt-get install -y nginx
    service nginx start
    sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
    EOF


  # Create an instance template.
  
    # used before: gcloud compute instance-templates create nginx-template \
  --metadata-from-file startup-script=startup.sh
  
  gcloud compute instance-templates create lb-nginx-template \
   --region=us-west1 \
   --network=default \
   --subnet=default \
   --tags=allow-health-check \
   --machine-type=g1-small \
   --image-family=debian-11 \
   --image-project=debian-cloud \
   --metadata=startup-script=startup.sh
  
# Create a target pool.

  gcloud compute target-pools create lb-nginx-pool \
    --region us-west1

# Create a managed instance group.

gcloud compute instance-groups managed create lb-nginx-group \
--base-instance-name nginx \
--size 2 \
--template lb-nginx-template \
--target-pool lb-nginx-pool
--zone us-west1-d

gcloud compute instances list

#Create a firewall rule named as Firewall rule to allow traffic (80/tcp).

 # before: gcloud compute firewall-rules create permit-tcp-rule-547 --allow tcp:80
 
 gcloud compute firewall-rules create permit-tcp-rule-547 \
  --network=default \
  --action=allow \
  --direction=ingress \
  --source-ranges=130.211.0.0/22,35.191.0.0/16 \
  --target-tags=allow-health-check \
  --rules=tcp:80
  
  # set up a global static external IP address
  gcloud compute addresses create lb-ipv4-1 \
  --ip-version=IPV4 \
  --global
  
  # note the IPv4 reserved
  gcloud compute addresses describe lb-ipv4-1 \
  --format="get(address)" \
  --global

#Create a health check.

gcloud compute health-checks create http http-basic-check \
  --port 80

#Create a backend service, and attach the managed instance group with 
named port (http:80).

gcloud compute backend-services create lb-nginx-backend \
--protocol HTTP \
--port-name http \
--http-health-checks http-basic-check 
--global

gcloud compute backend-services add-backend lb-nginx-backend \
--instance-group lb-nginx-group \
--instance-group-zone us-west1-d \
--global

#Create a URL map, and target the HTTP proxy to route requests to your URL map.

gcloud compute url-maps create web-map-http \
--default-service lb-nginx-backend

gcloud compute target-http-proxies create http-lb-proxy \
--url-map web-map-http

#Create a forwarding rule.

gcloud compute forwarding-rules create http-content-rule \
    --address=lb-ipv4-1\
    --global \
    --target-http-proxy=http-lb-proxy \
    --ports=80

gcloud compute forwarding-rules list

  # test traffic to instances
  Cloud console -> Navigation menu -> Network services -> Load balancing -> web-map-http ->
    Backend -> lb-nginx-backend
  http://[LOAD BALANCER IP_ADDRESS]/
